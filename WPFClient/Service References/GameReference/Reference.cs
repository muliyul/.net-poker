//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Blackjack.GameReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameReference.IGame")]
    public interface IGame {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Register", ReplyAction="http://tempuri.org/IGame/RegisterResponse")]
        void Register(string username, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Register", ReplyAction="http://tempuri.org/IGame/RegisterResponse")]
        System.Threading.Tasks.Task RegisterAsync(string username, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Login", ReplyAction="http://tempuri.org/IGame/LoginResponse")]
        Shared.Player Login(string username, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Login", ReplyAction="http://tempuri.org/IGame/LoginResponse")]
        System.Threading.Tasks.Task<Shared.Player> LoginAsync(string username, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/GetPlayerInfo", ReplyAction="http://tempuri.org/IGame/GetPlayerInfoResponse")]
        Shared.Player GetPlayerInfo(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/GetPlayerInfo", ReplyAction="http://tempuri.org/IGame/GetPlayerInfoResponse")]
        System.Threading.Tasks.Task<Shared.Player> GetPlayerInfoAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/ListTables", ReplyAction="http://tempuri.org/IGame/ListTablesResponse")]
        Shared.Table[] ListTables();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/ListTables", ReplyAction="http://tempuri.org/IGame/ListTablesResponse")]
        System.Threading.Tasks.Task<Shared.Table[]> ListTablesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Logout", ReplyAction="http://tempuri.org/IGame/LogoutResponse")]
        void Logout();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Logout", ReplyAction="http://tempuri.org/IGame/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/CreateTable", ReplyAction="http://tempuri.org/IGame/CreateTableResponse")]
        Shared.Table CreateTable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/CreateTable", ReplyAction="http://tempuri.org/IGame/CreateTableResponse")]
        System.Threading.Tasks.Task<Shared.Table> CreateTableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/JoinTable", ReplyAction="http://tempuri.org/IGame/JoinTableResponse")]
        Shared.Table JoinTable(string tableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/JoinTable", ReplyAction="http://tempuri.org/IGame/JoinTableResponse")]
        System.Threading.Tasks.Task<Shared.Table> JoinTableAsync(string tableId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/Leave")]
        void Leave();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/Leave")]
        System.Threading.Tasks.Task LeaveAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/Bet")]
        void Bet(int amount);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/Bet")]
        System.Threading.Tasks.Task BetAsync(int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Hit", ReplyAction="http://tempuri.org/IGame/HitResponse")]
        Shared.Card Hit();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Hit", ReplyAction="http://tempuri.org/IGame/HitResponse")]
        System.Threading.Tasks.Task<Shared.Card> HitAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/Fold")]
        void Fold();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/Fold")]
        System.Threading.Tasks.Task FoldAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameChannel : Blackjack.GameReference.IGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameClient : System.ServiceModel.ClientBase<Blackjack.GameReference.IGame>, Blackjack.GameReference.IGame {
        
        public GameClient() {
        }
        
        public GameClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GameClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Register(string username, string pass) {
            base.Channel.Register(username, pass);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(string username, string pass) {
            return base.Channel.RegisterAsync(username, pass);
        }
        
        public Shared.Player Login(string username, string pass) {
            return base.Channel.Login(username, pass);
        }
        
        public System.Threading.Tasks.Task<Shared.Player> LoginAsync(string username, string pass) {
            return base.Channel.LoginAsync(username, pass);
        }
        
        public Shared.Player GetPlayerInfo(string username) {
            return base.Channel.GetPlayerInfo(username);
        }
        
        public System.Threading.Tasks.Task<Shared.Player> GetPlayerInfoAsync(string username) {
            return base.Channel.GetPlayerInfoAsync(username);
        }
        
        public Shared.Table[] ListTables() {
            return base.Channel.ListTables();
        }
        
        public System.Threading.Tasks.Task<Shared.Table[]> ListTablesAsync() {
            return base.Channel.ListTablesAsync();
        }
        
        public void Logout() {
            base.Channel.Logout();
        }
        
        public System.Threading.Tasks.Task LogoutAsync() {
            return base.Channel.LogoutAsync();
        }
        
        public Shared.Table CreateTable() {
            return base.Channel.CreateTable();
        }
        
        public System.Threading.Tasks.Task<Shared.Table> CreateTableAsync() {
            return base.Channel.CreateTableAsync();
        }
        
        public Shared.Table JoinTable(string tableId) {
            return base.Channel.JoinTable(tableId);
        }
        
        public System.Threading.Tasks.Task<Shared.Table> JoinTableAsync(string tableId) {
            return base.Channel.JoinTableAsync(tableId);
        }
        
        public void Leave() {
            base.Channel.Leave();
        }
        
        public System.Threading.Tasks.Task LeaveAsync() {
            return base.Channel.LeaveAsync();
        }
        
        public void Bet(int amount) {
            base.Channel.Bet(amount);
        }
        
        public System.Threading.Tasks.Task BetAsync(int amount) {
            return base.Channel.BetAsync(amount);
        }
        
        public Shared.Card Hit() {
            return base.Channel.Hit();
        }
        
        public System.Threading.Tasks.Task<Shared.Card> HitAsync() {
            return base.Channel.HitAsync();
        }
        
        public void Fold() {
            base.Channel.Fold();
        }
        
        public System.Threading.Tasks.Task FoldAsync() {
            return base.Channel.FoldAsync();
        }
    }
}
